/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StatsRouteImport } from './routes/stats'
import { Route as ResourcesRouteImport } from './routes/resources'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LeaderboardRouteImport } from './routes/leaderboard'
import { Route as IndexRouteImport } from './routes/index'

const StatsRoute = StatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourcesRoute = ResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardRoute = LeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/profile': typeof ProfileRoute
  '/resources': typeof ResourcesRoute
  '/stats': typeof StatsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/profile': typeof ProfileRoute
  '/resources': typeof ResourcesRoute
  '/stats': typeof StatsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/profile': typeof ProfileRoute
  '/resources': typeof ResourcesRoute
  '/stats': typeof StatsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/leaderboard' | '/profile' | '/resources' | '/stats'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/leaderboard' | '/profile' | '/resources' | '/stats'
  id: '__root__' | '/' | '/leaderboard' | '/profile' | '/resources' | '/stats'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeaderboardRoute: typeof LeaderboardRoute
  ProfileRoute: typeof ProfileRoute
  ResourcesRoute: typeof ResourcesRoute
  StatsRoute: typeof StatsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardRoute: LeaderboardRoute,
  ProfileRoute: ProfileRoute,
  ResourcesRoute: ResourcesRoute,
  StatsRoute: StatsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
