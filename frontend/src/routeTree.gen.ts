/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StatsRouteImport } from './routes/stats'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LeaderboardRouteImport } from './routes/leaderboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResourceIndexRouteImport } from './routes/resource/index'
import { Route as ResourceSlugRouteImport } from './routes/resource/$slug'

const StatsRoute = StatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardRoute = LeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceIndexRoute = ResourceIndexRouteImport.update({
  id: '/resource/',
  path: '/resource/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceSlugRoute = ResourceSlugRouteImport.update({
  id: '/resource/$slug',
  path: '/resource/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/profile': typeof ProfileRoute
  '/stats': typeof StatsRoute
  '/resource/$slug': typeof ResourceSlugRoute
  '/resource': typeof ResourceIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/profile': typeof ProfileRoute
  '/stats': typeof StatsRoute
  '/resource/$slug': typeof ResourceSlugRoute
  '/resource': typeof ResourceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/profile': typeof ProfileRoute
  '/stats': typeof StatsRoute
  '/resource/$slug': typeof ResourceSlugRoute
  '/resource/': typeof ResourceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/leaderboard'
    | '/profile'
    | '/stats'
    | '/resource/$slug'
    | '/resource'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/leaderboard'
    | '/profile'
    | '/stats'
    | '/resource/$slug'
    | '/resource'
  id:
    | '__root__'
    | '/'
    | '/leaderboard'
    | '/profile'
    | '/stats'
    | '/resource/$slug'
    | '/resource/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeaderboardRoute: typeof LeaderboardRoute
  ProfileRoute: typeof ProfileRoute
  StatsRoute: typeof StatsRoute
  ResourceSlugRoute: typeof ResourceSlugRoute
  ResourceIndexRoute: typeof ResourceIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/': {
      id: '/resource/'
      path: '/resource'
      fullPath: '/resource'
      preLoaderRoute: typeof ResourceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/$slug': {
      id: '/resource/$slug'
      path: '/resource/$slug'
      fullPath: '/resource/$slug'
      preLoaderRoute: typeof ResourceSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardRoute: LeaderboardRoute,
  ProfileRoute: ProfileRoute,
  StatsRoute: StatsRoute,
  ResourceSlugRoute: ResourceSlugRoute,
  ResourceIndexRoute: ResourceIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
